x=2;y=2;z=7;a=x+5;b=(y+1)*7+3*z;
s=tf('s');t=[0:0.1:3]';
G=b/(a+s);
u=sin(100*t); %正弦波输入 

%对系统进行离散化
Gz=c2d(G,0.1,'zoh');
yz=lsim(Gz,u,t);%离散系统实际输出信号

% 随机噪声的均值为零,彼此相互独立，方差为有限正值,噪声的采样均方值有界。 
meanValue = 0;          % 噪声的均值
variance = 1;        % 噪声的方差
numSamples = length(t);     % 噪声样本的数量
bound = 5;           % 噪声采样均方值的上界
% 生成具有均值为0和方差为variance的随机噪声
noise = meanValue+ sqrt(variance) * randn(numSamples, 1);
%求噪声的采样均方值
noiseMSE = mean(noise.^2);
% 如果采样均方值超出了上界，调整噪声的方差
while noiseMSE > bound^2
    variance = variance * 0.9;  % 减少方差
    noise = meanValue+ sqrt(variance) * randn(numSamples, 1);
    noiseMSE = mean(noise.^2);
end
plot(t,noise);title('随机噪声');
xlabel('时间 (s)');
ylabel('幅度');

%辨识离散系统-输入u，输出yz
[pz,eb]=the_least_square_approach(u,yz+noise,length(t));%辨识a1,b0,b1
Gbz=tf([pz(2,length(t))], [1, pz(1,length(t))], 'Ts',0.1) % 'd' 表示离散时间
ybz=lsim(Gbz,u,t);
%绘图
figure;
subplot(2, 3, 1);
plot(t, u, 'k', 'LineWidth', 1); % 输入信号
title('输入信号');
xlabel('时间 (s)');
ylabel('幅度');
legend('输入信号');

subplot(2, 3, 2);
plot(t, yz, 'b', 'LineWidth', 1); % 真实系统输出
hold on;
plot(t, ybz, 'r--', 'LineWidth', 1); % 辨识系统输出
title('离散系统输出对比');
xlabel('时间 (s)');
ylabel('幅度');
legend('真实输出', '辨识输出');
grid on;

subplot(2, 3, 3);
plot(t, pz, 'b', 'LineWidth', 1); % 真实系统输出
title('离散系统参数估值曲线');
xlabel('时间 (s)');
ylabel('幅度');

%--------------------------------------------------------------
%辨识连续系统
y=lsim(G,u,t);%连续系统实际输出信号
Gb=d2c(Gbz,'zoh')%将辨识出来的离散模型连续化
yb=lsim(Gb,u,t);
subplot(2, 3, 5);
plot(t, y, 'b', 'LineWidth', 1); % 真实系统输出
hold on;
plot(t, yb, 'r--', 'LineWidth', 1); % 辨识系统输出
title('连续系统输出对比');
xlabel('时间 (s)');
ylabel('幅度');
legend('真实输出', '辨识输出');
grid on;


%辨识算法-返回辨识参数矩阵和辨识误差
function [parameter,error]=the_least_square_approach(dataIn,dataOut,L)
parameter0 = [0.000001 0.000001]'; %辨识参数初始值
P0 = 10^7*eye(2,2); %P矩阵
parameter=[parameter0,zeros(2,L-1)]; %被辨识参数矩阵的初始值及大小 
error=zeros(2,L); %相对误差的初始值及大小
n=0;
for k=2:L %开始递推运算
    %数据向量
    datak=[-dataOut(k-1),dataIn(k-1)]';  
    %求L(k)
    Lk= P0*datak/(1+datak'*P0*datak); 
    %求θ(k)
    parameterkk=parameter0+Lk*[dataOut(k)-datak'*parameter0]; 
    %求相对误差
    errork=dataOut(k)-datak'*parameter0; 
    %新获得的参数作为下一次递推的旧参数
    error(:,k)= errork;  
    parameter0= parameterkk; 
    parameter(:,k)= parameterkk;
    %求p(k)值p0-0.5*K*K'*[hk'*p0*hk+1]
    Pk=(eye(2,2)-Lk*datak')*P0;
    %把当前的p(k)值给下次用
    P0=Pk; 
    n=n+1;
end
end
